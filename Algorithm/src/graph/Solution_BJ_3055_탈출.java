package graph;

import java.util.*;

public class Solution_BJ_3055_탈출 {
	static Scanner scan = new Scanner(System.in);
	static StringBuilder sb = new StringBuilder();

	static int N, M;
	static String[] a;
	static int[][] dist_water, dist_hedgehog;
	static boolean[][] visit;
	static int[][] dir = { { 1, 0 }, { 0, 1 }, { -1, 0 }, { 0, -1 } };
	static ArrayList<Integer> group;

	static void input() {
		N = scan.nextInt();
		M = scan.nextInt();
		a = new String[N];
		for (int i = 0; i < N; i++)
			a[i] = scan.next();
		visit = new boolean[N][M];
		dist_water = new int[N][M];
		dist_hedgehog = new int[N][M];
	}

	// 모든 물들을 시작으로 동시에 BFS 시작!
	static void bfs_water() {
		Queue<Integer> Q = new LinkedList<>();
		// 모든 물의 위치를 Q에 전부 넣어주기!
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				// dist_water 와 visit 배열 초기화
				dist_water[i][j] = -1;
				visit[i][j] = false;
				if (a[i].charAt(j) == '*') {
					Q.add(i);
					Q.add(j);
					dist_water[i][j] = 0;
					visit[i][j] = true;
				}
			}
		}

		// BFS 과정 시작
		while(!Q.isEmpty()) {
			int x = Q.poll();
			int y = Q.poll();
			for(int k = 0; k < 4; k++) {
				int nx = x + dir[k][0];
				int ny = y + dir[k][1];
				if(nx < 0 || ny < 0 || nx >= N || ny >= M)
					continue;
				if(a[nx].charAt(ny) != '.')
					continue;
				if(visit[nx][ny])
					continue;
				visit[nx][ny] = true;
				dist_water[nx][ny] = dist_water[x][y] + 1;
				Q.add(nx);
				Q.add(ny);
			}
		}
	}

	// 고슴도치를 시작으로 동시에 BFS 시작!
	static void bfs_hedgehog() {
		Queue<Integer> Q = new LinkedList<>();
		// 고슴도치 위치를 Q에 넣어주기!
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				// dist_hedgehog 와 visit 배열 초기화
				/* TODO */
				if (a[i].charAt(j) == 'S') {
					/* TODO */
				}
			}
		}

		// BFS 과정 시작
		/* TODO */
	}

	static void pro() {
		// 각 칸마다 물에 닿는 시간 계산하기
		bfs_water();

		// 고슴도치가 물을 피해 탐색할 수 있는 공간 찾기
		bfs_hedgehog();

		// 탈출구 'D' 에 대한 결과를 통해 정답 출력하기
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (a[i].charAt(j) == 'D') {
					if(dist_hedgehog[i][j] == -1) {
						
					}
				}
			}
		}
	}

	public static void main(String[] args) {
		input();
		pro();
	}

}
